# This PowerShell script sets up Multi-Factor Authentication (MFA) phone methods for users based on information from a CSV file.

# Import necessary Microsoft Graph modules. These modules allow the script to interact with Microsoft Graph API, which provides access to Azure AD and Office 365 services.
Import-Module Microsoft.Graph.Authentication
Import-Module Microsoft.Graph.Users

# Authenticate with Microsoft Graph to perform operations on Azure AD objects.
# Scopes define the permissions the script will have - in this case, the ability to read all user profiles and manage user authentication methods.
$scopes = "User.Read.All", "UserAuthenticationMethod.ReadWrite.All"
# Connect-MgGraph initiates the sign-in process to authenticate the user running the script.
# It is essential to have previously registered an application in Azure AD and configured the necessary permissions for the script to work.
Connect-MgGraph -Scopes $scopes

# Verify that the connection to Microsoft Graph was successful before proceeding.
if (-not (Get-MgContext)) {
    Write-Host "Failed to connect to Microsoft Graph. Please check your credentials and try again." -ForegroundColor Red
    # If the connection fails, the script will exit and not attempt to process the CSV file.
    exit
}

# Load user data from a CSV file into a variable for processing.
# The path should point to the CSV file generated by the previous script.
$csvData = Import-Csv -Path "I:\Adaxes\Reports\TestUpdateMFA.csv"

# Iterate through each row in the CSV data.
foreach ($row in $csvData) {
    # Check if the 'ADNormalProcessed' column is set to 'yes', indicating that the user's mobile number is ready to be processed.
    if ($row.ADNormalProcessed -eq "yes" -and -not [string]::IsNullOrWhiteSpace($row.user)) {
        # Take the normalized mobile number from the 'ADMobileNormal' column of the CSV.
        $normalizedMobileNumber = $row.ADMobileNormal
        # Construct the full phone number, assuming the country code is '+1' for all numbers.
        $phoneNumber = "+1$normalizedMobileNumber"

        # Extract the user's email address from the 'Email' column to use as an identifier in the Graph API call.
        $user = $row.user

        # Try to set the MFA phone method for the user with the normalized phone number.
        try {
            # The New-MgUserAuthenticationPhoneMethod cmdlet creates a new phone authentication method for the specified user.
            New-MgUserAuthenticationPhoneMethod -UserId $user -PhoneType 'Mobile' -PhoneNumber $phoneNumber
            Write-Host "MFA phone method set for user: $user" -ForegroundColor Green
        } catch {
            # If an error occurs while setting the MFA method, catch the exception and display an error message.
            Write-Host "Failed to set MFA phone method for user: $user. Error: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        # If the 'ADNormalProcessed' value is not 'yes' or if the Email is missing, skip the row and write a warning message.
        Write-Host "Row skipped due to ADNormalProcessed not being 'yes' or missing Email for user: $($row.UserPrincipalName)" -ForegroundColor Yellow
    }
}

